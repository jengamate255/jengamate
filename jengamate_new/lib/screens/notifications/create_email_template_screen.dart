import 'package:flutter/material.dart';
import 'package:jengamate/models/email_template.dart';
import 'package:jengamate/services/email_service.dart';
import 'package:jengamate/ui/design_system/tokens/spacing.dart';
import 'package:jengamate/ui/design_system/tokens/typography.dart';
import 'package:provider/provider.dart';
import 'package:jengamate/services/user_state_provider.dart';

class CreateEmailTemplateScreen extends StatefulWidget {
  const CreateEmailTemplateScreen({Key? key}) : super(key: key);

  @override
  State<CreateEmailTemplateScreen> createState() =>
      _CreateEmailTemplateScreenState();
}

class _CreateEmailTemplateScreenState extends State<CreateEmailTemplateScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _subjectController = TextEditingController();
  final TextEditingController _bodyController = TextEditingController();

  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _subjectController.dispose();
    _bodyController.dispose();
    super.dispose();
  }

  Future<void> _createTemplate() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final emailService = Provider.of<EmailService>(context, listen: false);
      final newTemplate = EmailTemplate(
        id: '', // Will be generated by Firestore
        name: _nameController.text,
        subject: _subjectController.text,
        body: _bodyController.text,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await emailService.createEmailTemplate(newTemplate);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Email template created successfully!')),
      );
      Navigator.pop(context); // Go back to previous screen
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error creating template: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Email Template'),
        backgroundColor: Theme.of(context).primaryColor,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(JMSpacing.md),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Template Name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a template name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: JMSpacing.md),
              TextFormField(
                controller: _subjectController,
                decoration: const InputDecoration(
                  labelText: 'Subject',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a subject';
                  }
                  return null;
                },
              ),
              const SizedBox(height: JMSpacing.md),
              TextFormField(
                controller: _bodyController,
                maxLines: 10,
                decoration: const InputDecoration(
                  labelText: 'Body',
                  alignLabelWithHint: true,
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a body for the email';
                  }
                  return null;
                },
              ),
              const SizedBox(height: JMSpacing.lg),
              _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                      onPressed: _createTemplate,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Theme.of(context).primaryColor,
                        padding: const EdgeInsets.symmetric(
                            horizontal: JMSpacing.lg, vertical: JMSpacing.md),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(JMSpacing.sm),
                        ),
                      ),
                      child: Text(
                        'Create Template',
                        style: JMTypography.button.copyWith(color: Colors.white),
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }
}
