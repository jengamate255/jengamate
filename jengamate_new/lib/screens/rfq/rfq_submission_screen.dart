import 'package:flutter/material.dart';
import 'package:jengamate/utils/logger.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:jengamate/services/database_service.dart';
import 'package:provider/provider.dart';
import 'package:jengamate/utils/validators.dart';
import 'package:jengamate/models/rfq_model.dart';
import 'package:jengamate/utils/responsive.dart';
import 'package:jengamate/services/notification_service.dart';
import 'package:jengamate/services/supplier_matching_service.dart';
import 'package:jengamate/services/product_interaction_service.dart';
import 'package:jengamate/models/user_model.dart';
import 'package:jengamate/models/product_model.dart';

class RFQSubmissionScreen extends StatefulWidget {
  final String productId;
  final String productName;

  const RFQSubmissionScreen({
    super.key,
    required this.productId,
    required this.productName,
  });

  @override
  State<RFQSubmissionScreen> createState() => _RFQSubmissionScreenState();
}

class _RFQSubmissionScreenState extends State<RFQSubmissionScreen> {
  final _formKey = GlobalKey<FormState>();
  final _customerNameController = TextEditingController();
  final _customerEmailController = TextEditingController();
  final _customerPhoneController = TextEditingController();
  final _deliveryAddressController = TextEditingController();
  final _additionalNotesController = TextEditingController();
  final _quantityController = TextEditingController();
  List<String> _attachments = [];

  final DatabaseService _databaseService = DatabaseService();
  final ProductInteractionService _interactionService = ProductInteractionService();
  bool _isLoading = false;
  UserModel? _currentUser;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    setState(() => _isLoading = true);
    try {
      final user = await _databaseService.getCurrentUser();
      if (user != null) {
        setState(() => _currentUser = user);
        _customerNameController.text = '${user.firstName} ${user.lastName}' ?? '';
        _customerEmailController.text = user.email ?? '';
        _customerPhoneController.text = user.phoneNumber ?? '';
      }
    } catch (e) {
      Logger.logError('Error loading user data', e, StackTrace.current);
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _submitRFQ() async {
    if (!_formKey.currentState!.validate()) return;

    if (_currentUser == null) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Error: User not logged in. Please log in to submit an RFQ.')),
        );
      }
      return;
    }

    setState(() => _isLoading = true);
    try {
      final rfq = RFQModel(
        id: '', // Will be generated by Firestore
        userId: _currentUser!.uid, // Assign the current user's ID
        productId: widget.productId,
        productName: widget.productName,
        customerName: _customerNameController.text.trim(),
        customerEmail: _customerEmailController.text.trim(),
        customerPhone: _customerPhoneController.text.trim(),
        deliveryAddress: _deliveryAddressController.text.trim(),
        additionalNotes: _additionalNotesController.text.trim(),
        status: 'pending',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        quantity: int.tryParse(_quantityController.text) ?? 1,
        attachments: _attachments,
      );

      // Save RFQ to Firestore
      await _databaseService.addRFQ(rfq);

      // Track RFQ creation with detailed information
      if (_currentUser != null) {
        try {
          // Get product details for tracking
          final product = await _databaseService.getProduct(widget.productId);
          if (product != null) {
            await _interactionService.trackRFQCreation(
              rfqId: rfq.id,
              product: product,
              engineer: _currentUser!,
              rfqDetails: {
                'customerName': rfq.customerName,
                'customerEmail': rfq.customerEmail,
                'customerPhone': rfq.customerPhone,
                'deliveryAddress': rfq.deliveryAddress,
                'additionalNotes': rfq.additionalNotes,
                'attachments': rfq.attachments,
              },
              quantity: rfq.quantity,
              budgetRange: null,
            );
          }
        } catch (e) {
          Logger.logError('Error tracking RFQ creation', e, StackTrace.current);
        }
      }

      // Find matching suppliers and notify them
      final supplierMatchingService = SupplierMatchingService();
      final notificationService = NotificationService();
      final matchedSuppliers = await supplierMatchingService.findMatchingSuppliers(rfq);

      if (matchedSuppliers.isNotEmpty) {
        Logger.log('Found ${matchedSuppliers.length} matched suppliers for RFQ ID: ${rfq.id}');
        for (var supplier in matchedSuppliers) {
          await notificationService.sendNewRfqNotification(rfq, supplier);
        }
      } else {
        Logger.log('No suppliers found for RFQ ID: ${rfq.id}');
      }

      if (mounted) {
        // Show detailed success confirmation dialog
        await _showSuccessDialog();
        // Check if we can safely pop
        if (Navigator.of(context).canPop()) {
          Navigator.of(context).pop();
        }
      }
    } catch (e) {
      Logger.logError('Error submitting RFQ', e, StackTrace.current);
      if (mounted) {
        // Show detailed error dialog
        await _showErrorDialog(e.toString());
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _showSuccessDialog() async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          icon: const Icon(
            Icons.check_circle,
            color: Colors.green,
            size: 48,
          ),
          title: const Text(
            'RFQ Submitted Successfully!',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.green,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Your Request for Quote has been submitted successfully.',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                const Divider(),
                const SizedBox(height: 8),
                Text(
                  'RFQ Details:',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 8),
                _buildDetailRow('Product:', widget.productName),
                _buildDetailRow('Quantity:', _quantityController.text),
                _buildDetailRow('Customer:', _customerNameController.text),
                _buildDetailRow('Email:', _customerEmailController.text),
                _buildDetailRow('Phone:', _customerPhoneController.text),
                if (_deliveryAddressController.text.isNotEmpty)
                  _buildDetailRow('Delivery Address:', _deliveryAddressController.text),
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.shade200),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.info_outline, color: Colors.blue.shade600, size: 20),
                          const SizedBox(width: 8),
                          Text(
                            'What happens next?',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue.shade800,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '• Suppliers will review your RFQ\n'
                        '• You\'ll receive quotes via email and app notifications\n'
                        '• Compare quotes and select the best offer\n'
                        '• Track your RFQ status in the dashboard',
                        style: TextStyle(color: Colors.blue.shade700),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('View My RFQs'),
              onPressed: () {
                Navigator.of(context).pop();
                // TODO: Navigate to user's RFQ list
              },
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close dialog first
                // Then safely pop the RFQ submission screen if possible
                if (Navigator.of(context).canPop()) {
                  Navigator.of(context).pop();
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _showErrorDialog(String error) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          icon: const Icon(
            Icons.error_outline,
            color: Colors.red,
            size: 48,
          ),
          title: const Text(
            'RFQ Submission Failed',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.red,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'We encountered an error while submitting your RFQ. Please try again.',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.red.shade200),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Error Details:',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.red.shade800,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        error.length > 200 ? '${error.substring(0, 200)}...' : error,
                        style: TextStyle(color: Colors.red.shade700, fontSize: 14),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.shade200),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.lightbulb_outline, color: Colors.blue.shade600, size: 20),
                          const SizedBox(width: 8),
                          Text(
                            'Suggestions:',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue.shade800,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '• Check your internet connection\n'
                        '• Verify all required fields are filled\n'
                        '• Try refreshing the page\n'
                        '• Contact support if the problem persists',
                        style: TextStyle(color: Colors.blue.shade700),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('Contact Support'),
              onPressed: () {
                Navigator.of(context).pop();
                // TODO: Navigate to support/help screen
              },
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close error dialog
                // Don't auto-pop the submission screen on error - let user retry
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: const Text('Try Again'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildDetailRow(String label, String value) {
    if (value.isEmpty) return const SizedBox.shrink();
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(color: Colors.black87),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Submit RFQ'),
        elevation: 0,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Product Info Card
                    Card(
                      elevation: 2,
                      margin: const EdgeInsets.only(bottom: 20),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Product: ${widget.productName}',
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 16),
                            TextFormField(
                              controller: _quantityController,
                              decoration: const InputDecoration(
                                labelText: 'Quantity',
                                border: OutlineInputBorder(),
                              ),
                              keyboardType: TextInputType.number,
                              validator: (value) => Validators.requiredField(value, 'Quantity'),
                            ),
                          ],
                        ),
                      ),
                    ),
                    // Customer Details
                    const Text(
                      'Your Details',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _customerNameController,
                      decoration: const InputDecoration(
                        labelText: 'Full Name',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) => Validators.requiredField(value, 'Name'),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _customerEmailController,
                      decoration: const InputDecoration(
                        labelText: 'Email',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.emailAddress,
                      validator: (value) => Validators.validateEmail(value),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _customerPhoneController,
                      decoration: const InputDecoration(
                        labelText: 'Phone Number',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.phone,
                      validator: (value) => Validators.validatePhoneNumber(value),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _deliveryAddressController,
                      decoration: const InputDecoration(
                        labelText: 'Delivery Address',
                        border: OutlineInputBorder(),
                      ),
                      maxLines: 2,
                      validator: (value) => Validators.requiredField(value, 'Delivery Address'),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _additionalNotesController,
                      decoration: const InputDecoration(
                        labelText: 'Additional Notes (Optional)',
                        border: OutlineInputBorder(),
                      ),
                      maxLines: 3,
                    ),
                    const SizedBox(height: 24),
                    // Submit Button
                    ElevatedButton(
                      onPressed: _isLoading ? null : _submitRFQ,
                      child: _isLoading
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Text('Submit RFQ'),
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}
