// Mocks generated by Mockito 5.4.5 from annotations
// in jengamate/test/services/hybrid_storage_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;
import 'dart:typed_data' as _i7;

import 'package:jengamate/services/storage_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:storage_client/src/fetch.dart' as _i3;
import 'package:supabase/supabase.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFunctionsClient_0 extends _i1.SmartFake
    implements _i2.FunctionsClient {
  _FakeFunctionsClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_1 extends _i1.SmartFake
    implements _i2.SupabaseStorageClient {
  _FakeSupabaseStorageClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_2 extends _i1.SmartFake
    implements _i2.RealtimeClient {
  _FakeRealtimeClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_3 extends _i1.SmartFake
    implements _i2.PostgrestClient {
  _FakePostgrestClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_4 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_5 extends _i1.SmartFake
    implements _i2.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_6 extends _i1.SmartFake
    implements _i2.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_7<T1> extends _i1.SmartFake
    implements _i2.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_8 extends _i1.SmartFake
    implements _i2.RealtimeChannel {
  _FakeRealtimeChannel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFetch_9 extends _i1.SmartFake implements _i3.Fetch {
  _FakeFetch_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStorageFileApi_10 extends _i1.SmartFake
    implements _i2.StorageFileApi {
  _FakeStorageFileApi_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBucket_11 extends _i1.SmartFake implements _i2.Bucket {
  _FakeBucket_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignedUploadURLResponse_12 extends _i1.SmartFake
    implements _i2.SignedUploadURLResponse {
  _FakeSignedUploadURLResponse_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileObjectV2_13 extends _i1.SmartFake implements _i2.FileObjectV2 {
  _FakeFileObjectV2_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i2.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_0(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i2.FunctionsClient);

  @override
  set functions(_i2.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_1(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.SupabaseStorageClient);

  @override
  set storage(_i2.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_2(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i2.RealtimeClient);

  @override
  set realtime(_i2.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_3(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i2.PostgrestClient);

  @override
  set rest(_i2.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_4(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.GoTrueClient);

  @override
  _i2.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_5(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i2.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_6(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i2.SupabaseQuerySchema);

  @override
  _i2.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {
            #params: params,
            #get: get,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_7<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {
              #params: params,
              #get: get,
            },
          ),
        ),
      ) as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.RealtimeChannel channel(
    String? name, {
    _i2.RealtimeChannelConfig? opts = const _i2.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_8(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i2.RealtimeChannel);

  @override
  List<_i2.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i2.RealtimeChannel>[],
      ) as List<_i2.RealtimeChannel>);

  @override
  _i4.Future<String> removeChannel(_i2.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SupabaseStorageClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseStorageClient extends _i1.Mock
    implements _i2.SupabaseStorageClient {
  MockSupabaseStorageClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
      ) as String);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  _i3.Fetch get storageFetch => (super.noSuchMethod(
        Invocation.getter(#storageFetch),
        returnValue: _FakeFetch_9(
          this,
          Invocation.getter(#storageFetch),
        ),
      ) as _i3.Fetch);

  @override
  set storageFetch(_i3.Fetch? _storageFetch) => super.noSuchMethod(
        Invocation.setter(
          #storageFetch,
          _storageFetch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.StorageFileApi from(String? id) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [id],
        ),
        returnValue: _FakeStorageFileApi_10(
          this,
          Invocation.method(
            #from,
            [id],
          ),
        ),
      ) as _i2.StorageFileApi);

  @override
  void setAuth(String? jwt) => super.noSuchMethod(
        Invocation.method(
          #setAuth,
          [jwt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i2.Bucket>> listBuckets() => (super.noSuchMethod(
        Invocation.method(
          #listBuckets,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Bucket>>.value(<_i2.Bucket>[]),
      ) as _i4.Future<List<_i2.Bucket>>);

  @override
  _i4.Future<_i2.Bucket> getBucket(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getBucket,
          [id],
        ),
        returnValue: _i4.Future<_i2.Bucket>.value(_FakeBucket_11(
          this,
          Invocation.method(
            #getBucket,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Bucket>);

  @override
  _i4.Future<String> createBucket(
    String? id, [
    _i2.BucketOptions? bucketOptions = const _i2.BucketOptions(public: false),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBucket,
          [
            id,
            bucketOptions,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createBucket,
            [
              id,
              bucketOptions,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> updateBucket(
    String? id,
    _i2.BucketOptions? bucketOptions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBucket,
          [
            id,
            bucketOptions,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #updateBucket,
            [
              id,
              bucketOptions,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> emptyBucket(String? id) => (super.noSuchMethod(
        Invocation.method(
          #emptyBucket,
          [id],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #emptyBucket,
            [id],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> deleteBucket(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBucket,
          [id],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #deleteBucket,
            [id],
          ),
        )),
      ) as _i4.Future<String>);
}

/// A class which mocks [StorageFileApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageFileApi extends _i1.Mock implements _i2.StorageFileApi {
  MockStorageFileApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
      ) as String);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  _i4.Future<String> upload(
    String? path,
    _i6.File? file, {
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [
            path,
            file,
          ],
          {
            #fileOptions: fileOptions,
            #retryAttempts: retryAttempts,
            #retryController: retryController,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #upload,
            [
              path,
              file,
            ],
            {
              #fileOptions: fileOptions,
              #retryAttempts: retryAttempts,
              #retryController: retryController,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> uploadBinary(
    String? path,
    _i7.Uint8List? data, {
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBinary,
          [
            path,
            data,
          ],
          {
            #fileOptions: fileOptions,
            #retryAttempts: retryAttempts,
            #retryController: retryController,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #uploadBinary,
            [
              path,
              data,
            ],
            {
              #fileOptions: fileOptions,
              #retryAttempts: retryAttempts,
              #retryController: retryController,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> uploadToSignedUrl(
    String? path,
    String? token,
    _i6.File? file, [
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadToSignedUrl,
          [
            path,
            token,
            file,
            fileOptions,
            retryAttempts,
            retryController,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #uploadToSignedUrl,
            [
              path,
              token,
              file,
              fileOptions,
              retryAttempts,
              retryController,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> uploadBinaryToSignedUrl(
    String? path,
    String? token,
    _i7.Uint8List? data, [
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBinaryToSignedUrl,
          [
            path,
            token,
            data,
            fileOptions,
            retryAttempts,
            retryController,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #uploadBinaryToSignedUrl,
            [
              path,
              token,
              data,
              fileOptions,
              retryAttempts,
              retryController,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.SignedUploadURLResponse> createSignedUploadUrl(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSignedUploadUrl,
          [path],
        ),
        returnValue: _i4.Future<_i2.SignedUploadURLResponse>.value(
            _FakeSignedUploadURLResponse_12(
          this,
          Invocation.method(
            #createSignedUploadUrl,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.SignedUploadURLResponse>);

  @override
  _i4.Future<String> update(
    String? path,
    _i6.File? file, {
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            path,
            file,
          ],
          {
            #fileOptions: fileOptions,
            #retryAttempts: retryAttempts,
            #retryController: retryController,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #update,
            [
              path,
              file,
            ],
            {
              #fileOptions: fileOptions,
              #retryAttempts: retryAttempts,
              #retryController: retryController,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> updateBinary(
    String? path,
    _i7.Uint8List? data, {
    _i2.FileOptions? fileOptions = const _i2.FileOptions(),
    int? retryAttempts,
    _i2.StorageRetryController? retryController,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBinary,
          [
            path,
            data,
          ],
          {
            #fileOptions: fileOptions,
            #retryAttempts: retryAttempts,
            #retryController: retryController,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #updateBinary,
            [
              path,
              data,
            ],
            {
              #fileOptions: fileOptions,
              #retryAttempts: retryAttempts,
              #retryController: retryController,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> move(
    String? fromPath,
    String? toPath, {
    String? destinationBucket,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #move,
          [
            fromPath,
            toPath,
          ],
          {#destinationBucket: destinationBucket},
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #move,
            [
              fromPath,
              toPath,
            ],
            {#destinationBucket: destinationBucket},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> copy(
    String? fromPath,
    String? toPath, {
    String? destinationBucket,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copy,
          [
            fromPath,
            toPath,
          ],
          {#destinationBucket: destinationBucket},
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #copy,
            [
              fromPath,
              toPath,
            ],
            {#destinationBucket: destinationBucket},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> createSignedUrl(
    String? path,
    int? expiresIn, {
    _i2.TransformOptions? transform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSignedUrl,
          [
            path,
            expiresIn,
          ],
          {#transform: transform},
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createSignedUrl,
            [
              path,
              expiresIn,
            ],
            {#transform: transform},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i2.SignedUrl>> createSignedUrls(
    List<String>? paths,
    int? expiresIn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSignedUrls,
          [
            paths,
            expiresIn,
          ],
        ),
        returnValue: _i4.Future<List<_i2.SignedUrl>>.value(<_i2.SignedUrl>[]),
      ) as _i4.Future<List<_i2.SignedUrl>>);

  @override
  _i4.Future<_i7.Uint8List> download(
    String? path, {
    _i2.TransformOptions? transform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [path],
          {#transform: transform},
        ),
        returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<_i2.FileObjectV2> info(String? path) => (super.noSuchMethod(
        Invocation.method(
          #info,
          [path],
        ),
        returnValue: _i4.Future<_i2.FileObjectV2>.value(_FakeFileObjectV2_13(
          this,
          Invocation.method(
            #info,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.FileObjectV2>);

  @override
  _i4.Future<bool> exists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [path],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  String getPublicUrl(
    String? path, {
    _i2.TransformOptions? transform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicUrl,
          [path],
          {#transform: transform},
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicUrl,
            [path],
            {#transform: transform},
          ),
        ),
      ) as String);

  @override
  _i4.Future<List<_i2.FileObject>> remove(List<String>? paths) =>
      (super.noSuchMethod(
        Invocation.method(
          #remove,
          [paths],
        ),
        returnValue: _i4.Future<List<_i2.FileObject>>.value(<_i2.FileObject>[]),
      ) as _i4.Future<List<_i2.FileObject>>);

  @override
  _i4.Future<List<_i2.FileObject>> list({
    String? path,
    _i2.SearchOptions? searchOptions = const _i2.SearchOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #path: path,
            #searchOptions: searchOptions,
          },
        ),
        returnValue: _i4.Future<List<_i2.FileObject>>.value(<_i2.FileObject>[]),
      ) as _i4.Future<List<_i2.FileObject>>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i8.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> uploadImage({
    required String? fileName,
    required String? folder,
    _i7.Uint8List? bytes,
    _i6.File? file,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [],
          {
            #fileName: fileName,
            #folder: folder,
            #bytes: bytes,
            #file: file,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> deleteImage(String? url) => (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
