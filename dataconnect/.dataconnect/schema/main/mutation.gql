extend type Mutation {
  """
  ✨ Insert a single `Comment` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  comment_insert(
    """
    Data object to insert into the table.
    """
    data: Comment_Data!
  ): Comment_KeyOutput! @fdc_generated(from: "Comment", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Issue` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  issue_insert(
    """
    Data object to insert into the table.
    """
    data: Issue_Data!
  ): Issue_KeyOutput! @fdc_generated(from: "Issue", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Organization` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  organization_insert(
    """
    Data object to insert into the table.
    """
    data: Organization_Data!
  ): Organization_KeyOutput! @fdc_generated(from: "Organization", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Project` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  project_insert(
    """
    Data object to insert into the table.
    """
    data: Project_Data!
  ): Project_KeyOutput! @fdc_generated(from: "Project", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Task` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insert(
    """
    Data object to insert into the table.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Comment` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  comment_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Comment_Data!]!
  ): [Comment_KeyOutput!]! @fdc_generated(from: "Comment", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Issue` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  issue_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Issue_Data!]!
  ): [Issue_KeyOutput!]! @fdc_generated(from: "Issue", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Organization` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  organization_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Organization_Data!]!
  ): [Organization_KeyOutput!]! @fdc_generated(from: "Organization", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Project` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  project_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Project_Data!]!
  ): [Project_KeyOutput!]! @fdc_generated(from: "Project", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Task` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Comment` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Comment`.
  """
  comment_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Comment_Data!
  ): Comment_KeyOutput! @fdc_generated(from: "Comment", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Issue` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Issue`.
  """
  issue_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Issue_Data!
  ): Issue_KeyOutput! @fdc_generated(from: "Issue", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Organization` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Organization`.
  """
  organization_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Organization_Data!
  ): Organization_KeyOutput! @fdc_generated(from: "Organization", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Project` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Project`.
  """
  project_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Project_Data!
  ): Project_KeyOutput! @fdc_generated(from: "Project", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Task` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Comment` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Comment`.
  """
  comment_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Comment_Data!]!
  ): [Comment_KeyOutput!]! @fdc_generated(from: "Comment", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Issue` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Issue`.
  """
  issue_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Issue_Data!]!
  ): [Issue_KeyOutput!]! @fdc_generated(from: "Issue", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Organization` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Organization`.
  """
  organization_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Organization_Data!]!
  ): [Organization_KeyOutput!]! @fdc_generated(from: "Organization", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Project` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Project`.
  """
  project_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Project_Data!]!
  ): [Project_KeyOutput!]! @fdc_generated(from: "Project", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Task` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Comment` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Comment` or `null` if not found.
  """
  comment_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Comment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Comment_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Comment_Data!
  ): Comment_KeyOutput @fdc_generated(from: "Comment", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Issue` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Issue` or `null` if not found.
  """
  issue_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Issue_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Issue_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Issue_Data!
  ): Issue_KeyOutput @fdc_generated(from: "Issue", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Organization` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Organization` or `null` if not found.
  """
  organization_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Organization_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Organization_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Organization_Data!
  ): Organization_KeyOutput @fdc_generated(from: "Organization", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Project` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Project` or `null` if not found.
  """
  project_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Project_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Project_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Project_Data!
  ): Project_KeyOutput @fdc_generated(from: "Project", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Task` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Task` or `null` if not found.
  """
  task_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Task_Data!
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Comment` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  comment_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Comment_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Comment_Data!
  ): Int! @fdc_generated(from: "Comment", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Issue` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  issue_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Issue_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Issue_Data!
  ): Int! @fdc_generated(from: "Issue", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Organization` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  organization_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Organization_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Organization_Data!
  ): Int! @fdc_generated(from: "Organization", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Project` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  project_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Project_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Project_Data!
  ): Int! @fdc_generated(from: "Project", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Task` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  task_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Task_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Task_Data!
  ): Int! @fdc_generated(from: "Task", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Comment` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  comment_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Comment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Comment_FirstRow
  ): Comment_KeyOutput @fdc_generated(from: "Comment", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Issue` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  issue_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Issue_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Issue_FirstRow
  ): Issue_KeyOutput @fdc_generated(from: "Issue", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Organization` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  organization_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Organization_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Organization_FirstRow
  ): Organization_KeyOutput @fdc_generated(from: "Organization", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Project` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  project_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Project_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Project_FirstRow
  ): Project_KeyOutput @fdc_generated(from: "Project", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Task` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  task_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Comment` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  comment_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Comment_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Comment", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Issue` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  issue_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Issue_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Issue", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Organization` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  organization_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Organization_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Organization", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Project` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  project_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Project_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Project", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Task` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  task_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Task_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Task", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
